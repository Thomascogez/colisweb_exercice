{"version":3,"sources":["app/api/fetchLocation.ts","app/util/localStorageUtil.ts","app/context/AppContext.tsx","app/components/layout/NavBar/index.tsx","app/components/Map/index.tsx","app/components/SearchList/index.tsx","app/components/App.tsx","serviceWorker.ts","index.tsx","app/components/App.module.css","app/components/SearchList/SearchList.module.css","app/assets/img/search-24px.svg"],"names":["fetchLocation","searchTerm","fetch","method","getLocalStorage","localStorageData","localStorage","getItem","JSON","parse","error","AppContext","createContext","searchResult","getResult","Error","coordinate","lat","lng","setCoordinate","zoom","setZoom","AppContextProvider","children","useState","setSearchResult","Provider","value","key","toLowerCase","hasOwnProperty","getLocalStorageByKey","console","log","then","resp","json","features","item","setItem","stringify","addItemToLocalStorage","catch","err","NavBar","appContext","useContext","setSearchTerm","type","theme","href","navbar","className","onSubmit","e","preventDefault","size","seamless","src","searchIcon","width","alt","onChange","target","placeholder","GoogleApiWrapper","apiKey","props","google","selectedMarker","setSelectedMarker","selectedMarkerInfo","setSelectedMarkerInfo","visibleMarker","setVisibleMarker","onMarkerClick","marker","name","position","initialCenter","center","map","result","properties","id","label","onClick","geometry","coordinates","visible","onClose","SearchList","style","res","SearchListItem","App","fluid","MainContainer","MainRow","sm","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d634b876.chunk.js","sourcesContent":["\r\nconst API_ENDPOINT: string = \"https://api-adresse.data.gouv.fr/search/\"\r\n\r\n/**\r\n * Function use to fetch the api-adresse.data.gouv.fr API and return fetched results\r\n * @param searchTerm \r\n */\r\nconst fetchLocation = (searchTerm: string): Promise<any> => {\r\n  let requestOptions: any = {\r\n    method: 'GET',\r\n  };\r\n\r\n  return fetch(`${API_ENDPOINT}?q=${searchTerm}&limit=1000&type=housenumber&autocomplete=1`, requestOptions)\r\n\r\n}\r\n\r\n\r\nexport default fetchLocation","\r\nconst LOCALSTORAGE_KEY = \"LOCATION\"; // key of the stored local storage\r\n\r\n/**\r\n * get json object of the stored data from the local storage\r\n */\r\nconst getLocalStorage = (): Object => {\r\n    let localStorageData = localStorage.getItem(LOCALSTORAGE_KEY) || \"\";\r\n    try {\r\n        let parsedData = JSON.parse(localStorageData);\r\n        return parsedData\r\n    } catch (error) {\r\n        return {};\r\n    }\r\n}\r\n\r\n/**\r\n * Method use to add new key to the stored data from the local storage\r\n * @param key key to add to the stored object\r\n * @param item data to store\r\n */\r\nconst addItemToLocalStorage = (key: string, item: any, ): void => {\r\n    let localStorageData: object = getLocalStorage() || {};\r\n    localStorageData[key] = {};\r\n    localStorageData[key] = item;\r\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(localStorageData));\r\n}\r\n\r\n/**\r\n * Check if local stored data contain a specific key\r\n * @param key value of the key to check\r\n */\r\nconst hasKey = (key: string): boolean => {\r\n    return getLocalStorage().hasOwnProperty(key);\r\n}\r\n\r\n/**\r\n * Get an specific property of the stored object\r\n * @param key object key to retrieved\r\n */\r\nconst getLocalStorageByKey = (key: string) => {\r\n    return (getLocalStorage().hasOwnProperty(key)) ? getLocalStorage()[key] : null;\r\n}\r\n\r\n\r\nexport { addItemToLocalStorage, hasKey, getLocalStorageByKey };\r\n\r\n","import React, { createContext, useState } from 'react';\r\nimport fetchLocation from '../api/fetchLocation';\r\nimport { addItemToLocalStorage, getLocalStorageByKey, hasKey } from '../util/localStorageUtil';\r\ntype Coordinate = {\r\n    lat: number,\r\n    lng: number\r\n}\r\ntype AppContext = {\r\n    searchResult: Array<any>,\r\n    getResult(searchTerm: string): void,\r\n    coordinate: Coordinate,\r\n    setCoordinate(newCoordinate: Coordinate): void,\r\n    zoom: number,\r\n    setZoom(zoom: number): void;\r\n}\r\n\r\nconst AppContext = createContext<AppContext>({\r\n    searchResult: [],\r\n    getResult: () => {\r\n        throw new Error('getResult() not implemented');\r\n    },\r\n    coordinate: { lat: 0, lng: 0 },\r\n    setCoordinate: () => {\r\n        throw new Error('setCoordinate() not implemented');\r\n    },\r\n    zoom: 6,\r\n    setZoom: () => {\r\n        throw new Error('setZoom() not implemented');\r\n    },\r\n})\r\n\r\nconst AppContextProvider = ({ children }) => {\r\n    const [searchResult, setSearchResult] = useState([])\r\n    const [coordinate, setCoordinate] = useState({ lat: 48.8534, lng: 2.3488 })\r\n    const [zoom, setZoom] = useState(10)\r\n\r\n    /**\r\n     * Use to check if the result exist on the local storage then fetch new result to add / update it\r\n     * @param searchTerm keyword to search\r\n     */\r\n    const getResult = (searchTerm: string) => {\r\n        if (hasKey(searchTerm.toLowerCase())) {\r\n            setSearchResult(getLocalStorageByKey(searchTerm.toLowerCase()))\r\n            console.log('from local storage');\r\n        }\r\n        fetchLocation(searchTerm)\r\n            .then(resp => resp.json())\r\n            .then(resp => {\r\n                setSearchResult(resp.features);\r\n                addItemToLocalStorage(searchTerm.toLowerCase(), resp.features);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    \r\n    return (\r\n        <AppContext.Provider value={{ searchResult, getResult, coordinate, setCoordinate, zoom, setZoom }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport { AppContext, AppContextProvider };\r\n\r\n","import React, { useContext, useState } from 'react';\r\nimport { FormInput, InputGroup, InputGroupAddon, InputGroupText, Nav, Navbar as SNavBar, NavbarBrand } from 'shards-react';\r\nimport searchIcon from '../../../assets/img/search-24px.svg';\r\nimport { AppContext } from '../../../context/AppContext';\r\n\r\n\r\nexport default function NavBar() {\r\n    const appContext = useContext(AppContext);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        appContext.getResult(searchTerm)\r\n\r\n    }\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n    return (\r\n        <SNavBar type=\"dark\" theme=\"primary\" >\r\n            <NavbarBrand href=\"#\">Colisweb Exercice</NavbarBrand>\r\n            <Nav navbar className=\"ml-auto\">\r\n                <form onSubmit={onSubmit}>\r\n                    <InputGroup size=\"sm\" seamless>\r\n                        <InputGroupAddon type=\"prepend\">\r\n                            <InputGroupText>\r\n                                <img src={searchIcon} width=\"15\" alt=\"search icon\" />\r\n                            </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <FormInput \r\n                            value={searchTerm} \r\n                            onChange={(e) => setSearchTerm(e.target.value)} \r\n                            className=\"border-0\" placeholder=\"Search...\" \r\n                        />\r\n                    </InputGroup>\r\n                </form>\r\n            </Nav>\r\n        </SNavBar>\r\n    )\r\n}\r\n","import { GoogleApiWrapper, InfoWindow, Map as GMap, Marker } from 'google-maps-react';\r\nimport React, { useContext, useState } from 'react';\r\nimport { AppContext } from '../../context/AppContext';\r\n\r\n\r\nconst Map = (props: { google: any }) => {\r\n\r\n    const { google } = props;\r\n    const appContext = useContext(AppContext);\r\n    const [selectedMarker, setSelectedMarker] = useState<any>();\r\n    const [selectedMarkerInfo, setSelectedMarkerInfo] = useState<string>(\"\");\r\n    const [visibleMarker, setVisibleMarker] = useState<boolean>(false);\r\n\r\n    const onMarkerClick = (props, marker, e) => {\r\n        setSelectedMarkerInfo(props.name)\r\n        setSelectedMarker(marker);\r\n        setVisibleMarker(true);\r\n        appContext.setCoordinate(props.position)\r\n    }\r\n\r\n    const onInfoWindowClose = () => {\r\n        setSelectedMarkerInfo(\"\")\r\n        setSelectedMarker(null);\r\n        setVisibleMarker(false);\r\n    }\r\n    return (\r\n        <GMap\r\n            google={google}\r\n            zoom={appContext.zoom}\r\n            initialCenter={{\r\n                lat: appContext.coordinate.lat,\r\n                lng: appContext.coordinate.lng\r\n            }}\r\n            center={{\r\n                lat: appContext.coordinate.lat,\r\n                lng: appContext.coordinate.lng\r\n            }}\r\n        >\r\n            {appContext.searchResult.map(result => (\r\n\r\n                <Marker key={result.properties.id}\r\n                    name={result.properties.label}\r\n                    onClick={onMarkerClick}\r\n                    position={{ lat: result.geometry.coordinates[1], lng: result.geometry.coordinates[0] }}\r\n                />\r\n            ))}\r\n            <InfoWindow\r\n                marker={selectedMarker}\r\n                visible={visibleMarker}\r\n                onClose={onInfoWindowClose}\r\n            >\r\n                <div>\r\n                    <p>{selectedMarkerInfo}</p>\r\n                </div>\r\n            </InfoWindow>\r\n\r\n        </GMap>\r\n\r\n    )\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: '' // Api key here\r\n})(Map);","import React, { useContext } from 'react';\r\nimport { ListGroup, ListGroupItem } from 'shards-react';\r\nimport { AppContext } from '../../context/AppContext';\r\nimport style from './SearchList.module.css';\r\nconst SearchList = () => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    const onClick = (lat, lng) => {\r\n        // focus on clicked map point and zoom\r\n        appContext.setCoordinate({ lat, lng })\r\n        appContext.setZoom(15)\r\n    }\r\n\r\n    return (\r\n        <ListGroup className={style.SearchList}>\r\n            {appContext.searchResult.map((res) => (\r\n                <ListGroupItem\r\n                    onClick={() => onClick(res.geometry.coordinates[1], res.geometry.coordinates[0])}\r\n                    className={style.SearchListItem} >{res.properties.label}\r\n                </ListGroupItem>)\r\n            )}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchList","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from 'react';\nimport { Col, Container, Row } from 'shards-react';\nimport \"shards-ui/dist/css/shards.min.css\";\nimport { AppContextProvider } from '../context/AppContext';\nimport style from './App.module.css';\nimport NavBar from './layout/NavBar/';\nimport Map from './Map';\nimport SearchList from './SearchList';\n\nconst App = () => {\n\n  return (\n    <AppContextProvider>\n      <NavBar />\n      <Container fluid className={style.MainContainer}>\n        <Row className={style.MainRow}>\n          <Col sm=\"12\" lg=\"8\">\n            <Map />\n          </Col>\n          <Col sm=\"12\" lg=\"4\">\n            <SearchList />\n          </Col>\n        </Row>\n      </Container>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainContainer\":\"App_MainContainer__3W97R\",\"MainRow\":\"App_MainRow__1b1MY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchList\":\"SearchList_SearchList__1mSUi\",\"SearchListItem\":\"SearchList_SearchListItem__lAnYJ\"};","module.exports = __webpack_public_path__ + \"static/media/search-24px.a88f7755.svg\";"],"sourceRoot":""}